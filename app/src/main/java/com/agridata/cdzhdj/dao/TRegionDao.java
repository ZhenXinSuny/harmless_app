package com.agridata.cdzhdj.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.agridata.cdzhdj.data.TRegion;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TREGION".
*/
public class TRegionDao extends AbstractDao<TRegion, Void> {

    public static final String TABLENAME = "TREGION";

    /**
     * Properties of entity TRegion.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Region_id = new Property(0, long.class, "region_id", false, "REGION_ID");
        public final static Property Region_guid = new Property(1, String.class, "region_guid", false, "REGION_GUID");
        public final static Property Region_parent_id = new Property(2, long.class, "region_parent_id", false, "REGION_PARENT_ID");
        public final static Property Region_name = new Property(3, String.class, "region_name", false, "REGION_NAME");
        public final static Property Region_level = new Property(4, long.class, "region_level", false, "REGION_LEVEL");
        public final static Property Region_code = new Property(5, String.class, "region_code", false, "REGION_CODE");
        public final static Property Region_serial = new Property(6, long.class, "region_serial", false, "REGION_SERIAL");
        public final static Property Region_shortname = new Property(7, String.class, "region_shortname", false, "REGION_SHORTNAME");
        public final static Property Region_path = new Property(8, String.class, "region_path", false, "REGION_PATH");
        public final static Property Region_spell = new Property(9, String.class, "region_spell", false, "REGION_SPELL");
    }


    public TRegionDao(DaoConfig config) {
        super(config);
    }
    
    public TRegionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TREGION\" (" + //
                "\"REGION_ID\" INTEGER NOT NULL ," + // 0: region_id
                "\"REGION_GUID\" TEXT," + // 1: region_guid
                "\"REGION_PARENT_ID\" INTEGER NOT NULL ," + // 2: region_parent_id
                "\"REGION_NAME\" TEXT," + // 3: region_name
                "\"REGION_LEVEL\" INTEGER NOT NULL ," + // 4: region_level
                "\"REGION_CODE\" TEXT," + // 5: region_code
                "\"REGION_SERIAL\" INTEGER NOT NULL ," + // 6: region_serial
                "\"REGION_SHORTNAME\" TEXT," + // 7: region_shortname
                "\"REGION_PATH\" TEXT," + // 8: region_path
                "\"REGION_SPELL\" TEXT);"); // 9: region_spell
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TREGION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TRegion entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getRegion_id());
 
        String region_guid = entity.getRegion_guid();
        if (region_guid != null) {
            stmt.bindString(2, region_guid);
        }
        stmt.bindLong(3, entity.getRegion_parent_id());
 
        String region_name = entity.getRegion_name();
        if (region_name != null) {
            stmt.bindString(4, region_name);
        }
        stmt.bindLong(5, entity.getRegion_level());
 
        String region_code = entity.getRegion_code();
        if (region_code != null) {
            stmt.bindString(6, region_code);
        }
        stmt.bindLong(7, entity.getRegion_serial());
 
        String region_shortname = entity.getRegion_shortname();
        if (region_shortname != null) {
            stmt.bindString(8, region_shortname);
        }
 
        String region_path = entity.getRegion_path();
        if (region_path != null) {
            stmt.bindString(9, region_path);
        }
 
        String region_spell = entity.getRegion_spell();
        if (region_spell != null) {
            stmt.bindString(10, region_spell);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TRegion entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getRegion_id());
 
        String region_guid = entity.getRegion_guid();
        if (region_guid != null) {
            stmt.bindString(2, region_guid);
        }
        stmt.bindLong(3, entity.getRegion_parent_id());
 
        String region_name = entity.getRegion_name();
        if (region_name != null) {
            stmt.bindString(4, region_name);
        }
        stmt.bindLong(5, entity.getRegion_level());
 
        String region_code = entity.getRegion_code();
        if (region_code != null) {
            stmt.bindString(6, region_code);
        }
        stmt.bindLong(7, entity.getRegion_serial());
 
        String region_shortname = entity.getRegion_shortname();
        if (region_shortname != null) {
            stmt.bindString(8, region_shortname);
        }
 
        String region_path = entity.getRegion_path();
        if (region_path != null) {
            stmt.bindString(9, region_path);
        }
 
        String region_spell = entity.getRegion_spell();
        if (region_spell != null) {
            stmt.bindString(10, region_spell);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public TRegion readEntity(Cursor cursor, int offset) {
        TRegion entity = new TRegion( //
            cursor.getLong(offset + 0), // region_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // region_guid
            cursor.getLong(offset + 2), // region_parent_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // region_name
            cursor.getLong(offset + 4), // region_level
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // region_code
            cursor.getLong(offset + 6), // region_serial
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // region_shortname
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // region_path
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // region_spell
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TRegion entity, int offset) {
        entity.setRegion_id(cursor.getLong(offset + 0));
        entity.setRegion_guid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRegion_parent_id(cursor.getLong(offset + 2));
        entity.setRegion_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRegion_level(cursor.getLong(offset + 4));
        entity.setRegion_code(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRegion_serial(cursor.getLong(offset + 6));
        entity.setRegion_shortname(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRegion_path(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRegion_spell(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(TRegion entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(TRegion entity) {
        return null;
    }

    @Override
    public boolean hasKey(TRegion entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
