package com.agridata.cdzhdj.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.agridata.cdzhdj.dbutils.InfoConverter;
import java.util.List;

import com.agridata.cdzhdj.data.HarmlessAnimalBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HARMLESS_ANIMAL_BEAN".
*/
public class HarmlessAnimalBeanDao extends AbstractDao<HarmlessAnimalBean, Long> {

    public static final String TABLENAME = "HARMLESS_ANIMAL_BEAN";

    /**
     * Properties of entity HarmlessAnimalBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Status = new Property(1, int.class, "Status", false, "STATUS");
        public final static Property ErrorCode = new Property(2, int.class, "ErrorCode", false, "ERROR_CODE");
        public final static Property Message = new Property(3, String.class, "Message", false, "MESSAGE");
        public final static Property Result = new Property(4, String.class, "Result", false, "RESULT");
    }

    private final InfoConverter ResultConverter = new InfoConverter();

    public HarmlessAnimalBeanDao(DaoConfig config) {
        super(config);
    }
    
    public HarmlessAnimalBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HARMLESS_ANIMAL_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"STATUS\" INTEGER NOT NULL ," + // 1: Status
                "\"ERROR_CODE\" INTEGER NOT NULL ," + // 2: ErrorCode
                "\"MESSAGE\" TEXT," + // 3: Message
                "\"RESULT\" TEXT);"); // 4: Result
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HARMLESS_ANIMAL_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HarmlessAnimalBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getStatus());
        stmt.bindLong(3, entity.getErrorCode());
 
        String Message = entity.getMessage();
        if (Message != null) {
            stmt.bindString(4, Message);
        }
 
        List Result = entity.getResult();
        if (Result != null) {
            stmt.bindString(5, ResultConverter.convertToDatabaseValue(Result));
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HarmlessAnimalBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getStatus());
        stmt.bindLong(3, entity.getErrorCode());
 
        String Message = entity.getMessage();
        if (Message != null) {
            stmt.bindString(4, Message);
        }
 
        List Result = entity.getResult();
        if (Result != null) {
            stmt.bindString(5, ResultConverter.convertToDatabaseValue(Result));
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HarmlessAnimalBean readEntity(Cursor cursor, int offset) {
        HarmlessAnimalBean entity = new HarmlessAnimalBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // Status
            cursor.getInt(offset + 2), // ErrorCode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Message
            cursor.isNull(offset + 4) ? null : ResultConverter.convertToEntityProperty(cursor.getString(offset + 4)) // Result
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HarmlessAnimalBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStatus(cursor.getInt(offset + 1));
        entity.setErrorCode(cursor.getInt(offset + 2));
        entity.setMessage(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setResult(cursor.isNull(offset + 4) ? null : ResultConverter.convertToEntityProperty(cursor.getString(offset + 4)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HarmlessAnimalBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HarmlessAnimalBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HarmlessAnimalBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
